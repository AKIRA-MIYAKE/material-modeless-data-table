{"version":3,"sources":["../../src/datasheet-components/DataSheet.tsx","../../src/datasheet-components/value-renderer.ts","../../src/hooks/useData.ts","../../src/components/ActionColumnHeaderCell.tsx","../../src/components/InsertActionRow.tsx","../../src/datasheet-components/SheetRenderer.tsx","../../src/components/ReorderActionCell.tsx","../../src/components/DeleteActionCell.tsx","../../src/datasheet-components/RowRenderer.tsx","../../src/datasheet-components/CellRenderer.tsx","../../src/datasheet-components/ValueViewer.tsx","../../src/datasheet-components/DataEditorTextField.tsx","../../src/datasheet-components/DataEditorSelect.tsx","../../src/datasheet-components/DataEditorCheckbox.tsx","../../src/datasheet-components/DataEditor.tsx","../../src/index.tsx","../../src/hooks/useSheetRenderer.tsx","../../src/hooks/useRowRenderer.tsx","../../src/hooks/useCellRenderer.tsx","../../src/hooks/useValueViewer.tsx","../../src/hooks/useDataEditor.tsx","App.tsx","index.tsx"],"names":["DataSheet","ReactDataSheet","valueRenderer","value","valueType","useData","id","params","items","columns","isReadOnly","isTemporaryReadOnly","onReorder","onChangeAtIndex","onDeleteAtIndex","onInsertAtLast","data","useMemo","item","index","column","key","readOnly","itemToRowCells","onCellsChanged","useCallback","changes","row","change","col","oldItem","updatedValue","newItem","onDragEnd","event","destIndex","srcIndex","targetItem","updatedItems","onDelete","onInsert","current","createItem","ActionColumnHeaderCell","padding","useCellStyles","makeStyles","root","paddingTop","theme","paddingBottom","InsertActionRow","colspan","isDisabled","cellClasses","onButtoNClick","React","classes","colSpan","variant","color","size","disabled","onClick","SheetRenderer","tableProps","children","tableSize","isTableHeaderHidden","isReorderDisabled","isDeleteDisabled","isInsertDisabled","insertActionRowColspan","onDragStart","activeElement","document","TableHeaderElement","style","TableBodyElement","droppableId","ref","provided","innerRef","TableFooterElement","textAlign","ReorderActionCell","props","Object","DeleteActionCell","onButtonClick","uesRowStyles","display","tableLayout","backgroundColor","hover","selected","RowRenderer","rowClasses","draggableId","onDeleteActionCellDelete","isDragDisabled","snapshot","isDragging","position","cursor","lighten","useRendererStyles","editing","error","content","top","right","borderTop","borderLeft","CellRenderer","cell","onMouseDown","onMouseOver","onContextMenu","onDoubleClick","rendererClasses","useState","errorMessage","setErrorMessage","rendererClassName","cellStyle","width","minWidth","maxWidth","whiteSpace","overflowWrap","overflowX","textOverflow","CellElement","className","useEffect","title","placement","ValueViewer","viewerStyle","formatedValue","useTextFieldStyles","marginTop","marginBottom","useInputPropsStyles","fontSize","DataEditorTextField","onChange","onRevert","onKeyDown","onBeginEditing","onEndEditing","textFieldClasses","inputPropsClasses","defaultValue","inputType","inputPropsRef","useRef","onInputChange","Number","parseInputValue","onInputPropsBlur","type","helperText","inputProps","onBlur","useRootStyles","useSelectStyles","parseTargetValue","DataEditorSelect","onCommit","rootClasses","selectClasses","isOpen","setIsOpen","onMenuItemMouseDown","targetValue","parsedValue","onMenuItemKeyDown","Error","open","e","DataEditorCheckbox","isIndeterminate","setIsIndeterminate","checkboxInputRef","onCheckboxMouseDown","onCheckboxKeyDown","onCheckboxChange","defaultChecked","indeterminate","inputRef","DataEditor","sheetRenderer","rowRenderer","useRowRenderer","cellRenderer","useCellRenderer","valueViewer","useValueViewer","dataEditor","useDataEditor","App","isTableSizeSmall","setIsTableSizeSmall","setIsReadOnly","setIsTemporaryReadOnly","setIsTableHeaderHidden","setIsReorderDisabled","setIsDeleteDisabled","setIsInsertDisabled","onTableSizeSwitchChange","target","checked","onReadOnlySwitchChage","onTemporaryReadOnlySwitchChage","onTableHeaderHiddenSwitchChage","onReorderDisabledSwitchChange","onDeleteDisabledSwitchChange","onInsertDisabledSwitchChange","a","b","hidden","c","d","Date","toISOString","setItems","keyProp","validate","_","filter","length","label","isRequired","enum","defualtValue","isHidden","minWIdth","formatViewerValue","toLocaleString","map","i","console","log","Container","Box","marginY","Paper","FormGroup","FormControlLabel","control","Switch","TableContainer","component","ReactDOM","render","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.dd378f60.chunk.js","sourcesContent":["import ReactDataSheet from 'react-datasheet'\n\nimport type { ItemValue, DataSheetCell } from '../interfaces'  // eslint-disable-line\n\nexport default class DataSheet extends ReactDataSheet<\n  DataSheetCell,\n  ItemValue\n> {}\n","import { DataSheetValueRenderer } from '../interfaces'\n\nconst valueRenderer: DataSheetValueRenderer = ({ value, valueType }) => {\n  switch (valueType) {\n    case 'string':\n      return value as string | null\n    case 'number':\n      return value as number | null\n    case 'boolean':\n      if (value === null) {\n        return '━'\n      } else {\n        return value ? '✔︎' : null\n      }\n  }\n}\n\nexport default valueRenderer\n","import { useMemo, useCallback } from 'react'\n\nimport {\n  ModelessDataTableProps,\n  NullableItem,\n  Item,\n  ItemValue,\n  Column,\n  SheetRendererProps,\n  RowRendererProps,\n  DataSheetCell,\n  DataSheetCellsChangedHandler,\n} from '../interfaces'\n\nexport const itemToRowCells = <T extends Item>(params: {\n  item: NullableItem<T>\n  index: number\n  id: string\n  columns: Column<T>[]\n  isReadOnly?: boolean\n  isTemporaryReadOnly?: boolean\n}): DataSheetCell[] => {\n  const { item, index, id, columns, isReadOnly, isTemporaryReadOnly } = params\n\n  return columns\n    .filter((column) => !column.isHidden)\n    .map((column) => {\n      let value: ItemValue\n\n      if (typeof item[column.keyProp] === 'undefined') {\n        value = null\n      } else {\n        value = item[column.keyProp]\n      }\n\n      const key = `${id}_${column.keyProp}_${index}`\n\n      return {\n        value,\n        valueType: column.valueType,\n        key,\n        readOnly: isReadOnly || isTemporaryReadOnly || column.isReadOnly,\n        ...column.cell,\n      }\n    })\n}\n\nexport const createItem = <T extends Item>(params: {\n  columns: Column<T>[]\n}): NullableItem<T> => {\n  const { columns } = params\n\n  return columns.reduce((acc, current) => {\n    let value: ItemValue = null\n\n    if (current.defualtValue) {\n      if (typeof current.defualtValue === 'function') {\n        value = current.defualtValue()\n      } else {\n        value = current.defualtValue\n      }\n    }\n\n    return {\n      ...acc,\n      [current.keyProp]: value,\n    }\n  }, {} as NullableItem<T>)\n}\n\nconst useData = <T extends Item>(\n  params: ModelessDataTableProps<T>\n): {\n  data: DataSheetCell[][]\n  onCellsChanged: DataSheetCellsChangedHandler\n  onDragEnd: SheetRendererProps<T>['onDragEnd']\n  onDelete: RowRendererProps<T>['onDelete']\n  onInsert: SheetRendererProps<T>['onInsert']\n} => {\n  const {\n    id,\n    items,\n    columns,\n    isReadOnly,\n    isTemporaryReadOnly,\n    onReorder,\n    onChangeAtIndex,\n    onDeleteAtIndex,\n    onInsertAtLast,\n  } = params\n\n  const data = useMemo(() => {\n    return items.map((item, index) =>\n      itemToRowCells({\n        item,\n        index,\n        id,\n        columns,\n        isReadOnly,\n        isTemporaryReadOnly,\n      })\n    )\n  }, [id, items, columns, isReadOnly, isTemporaryReadOnly])\n\n  const onCellsChanged = useCallback<DataSheetCellsChangedHandler>(\n    (changes) => {\n      if (!onChangeAtIndex) {\n        return\n      }\n\n      changes.forEach((change) => {\n        const { row, col, value } = change\n\n        const index = row\n        const oldItem = items[index]\n        const column = columns.filter((column) => !column.isHidden)[col]\n\n        let updatedValue = value\n        if (typeof updatedValue === 'string' && updatedValue.length === 0) {\n          updatedValue = null\n        }\n\n        if (column.isRequired && updatedValue === null) {\n          return\n        }\n\n        if (column.validate && column.validate(updatedValue, oldItem, items)) {\n          return\n        }\n\n        if (column.formatEditedValue) {\n          updatedValue = column.formatEditedValue(updatedValue)\n        }\n\n        const newItem = {\n          ...oldItem,\n          [column.keyProp]: updatedValue,\n        }\n\n        onChangeAtIndex({\n          newItem,\n          oldItem,\n          index,\n        })\n      })\n    },\n    [items, columns, data, onChangeAtIndex]\n  )\n\n  const onDragEnd = useCallback<SheetRendererProps<T>['onDragEnd']>(\n    (event) => {\n      if (!onReorder) {\n        return\n      }\n\n      if (event.reason === 'CANCEL') {\n        return\n      }\n\n      const destIndex = event.destination && event.destination.index\n      if (typeof destIndex === 'undefined') {\n        return\n      }\n\n      const srcIndex = event.source.index\n\n      if (srcIndex === destIndex) {\n        return\n      }\n\n      const targetItem = items[srcIndex]\n      const updatedItems = items.filter((_, index) => index !== srcIndex)\n      updatedItems.splice(destIndex, 0, targetItem)\n\n      onReorder({ items: updatedItems, srcIndex, destIndex })\n    },\n    [items, onReorder]\n  )\n\n  const onDelete = useCallback<RowRendererProps<T>['onDelete']>(\n    (row) => {\n      if (!onDeleteAtIndex) {\n        return\n      }\n\n      const index = row\n      const oldItem = items[index]\n\n      onDeleteAtIndex({\n        oldItem,\n        index,\n      })\n    },\n    [items, onDeleteAtIndex]\n  )\n\n  const onInsert = useCallback<SheetRendererProps<T>['onInsert']>(() => {\n    if (!onInsertAtLast) {\n      return\n    }\n\n    const newItem = createItem({ columns })\n    const index = items.length\n\n    onInsertAtLast({\n      newItem,\n      index,\n    })\n  }, [items, columns, onInsertAtLast])\n\n  return {\n    data,\n    onCellsChanged,\n    onDragEnd,\n    onDelete,\n    onInsert,\n  }\n}\n\nexport default useData\n","import React, { FC } from 'react'\nimport TableCell from '@material-ui/core/TableCell'\n\nconst ActionColumnHeaderCell: FC = () => {\n  return <TableCell padding='checkbox' />\n}\n\nexport default ActionColumnHeaderCell\n","import React, { FC, useCallback } from 'react'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useCellStyles = makeStyles((theme) => ({\n  root: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n}))\n\nexport interface InsertActionRowProps {\n  colspan: number\n  onInsert: () => void\n  isDisabled?: boolean\n}\n\nconst InsertActionRow: FC<InsertActionRowProps> = ({\n  colspan,\n  onInsert,\n  isDisabled,\n}) => {\n  const cellClasses = useCellStyles()\n\n  const onButtoNClick = useCallback(() => {\n    if (isDisabled) {\n      return\n    }\n\n    onInsert()\n  }, [isDisabled, onInsert])\n\n  return (\n    <TableRow>\n      <TableCell classes={cellClasses} colSpan={colspan}>\n        <Button\n          variant='outlined'\n          color='primary'\n          size='small'\n          disabled={isDisabled}\n          onClick={onButtoNClick}\n        >\n          Add\n        </Button>\n      </TableCell>\n    </TableRow>\n  )\n}\n\nexport default InsertActionRow\n","import React, { PropsWithChildren, useMemo, useCallback } from 'react'\nimport {\n  DragDropContextProps,\n  DragDropContext,\n  Droppable,\n} from 'react-beautiful-dnd'\nimport Table from '@material-ui/core/Table'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableFooter from '@material-ui/core/TableFooter'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\n\nimport { Item, SheetRendererProps } from '../interfaces'\n\nimport ActionColumnHeaderCell from '../components/ActionColumnHeaderCell'\nimport InsertActionRow from '../components/InsertActionRow'\n\nconst SheetRenderer: <T extends Item>(\n  props: PropsWithChildren<SheetRendererProps<T>>\n) => JSX.Element = ({ tableProps, onInsert, onDragEnd, children }) => {\n  const {\n    id,\n    columns,\n    tableSize,\n    isReadOnly,\n    isTemporaryReadOnly,\n    isTableHeaderHidden,\n    isReorderDisabled,\n    isDeleteDisabled,\n    isInsertDisabled,\n  } = tableProps\n\n  const insertActionRowColspan = useMemo(() => {\n    const visibleColumns = columns.filter((col) => !col.isHidden)\n    let colspan = visibleColumns.length\n\n    if (isReadOnly) {\n      return colspan\n    }\n\n    if (!isReorderDisabled) {\n      colspan++\n    }\n\n    if (!isDeleteDisabled) {\n      colspan++\n    }\n\n    return colspan\n  }, [columns, isReadOnly, isReorderDisabled, isDeleteDisabled])\n\n  const onDragStart = useCallback<\n    NonNullable<DragDropContextProps['onDragEnd']>\n  >(() => {\n    const activeElement = document.activeElement\n    if (activeElement && activeElement instanceof HTMLElement) {\n      activeElement.blur()\n    }\n  }, [])\n\n  const TableHeaderElement = useMemo(() => {\n    if (isTableHeaderHidden) {\n      return null\n    }\n\n    return (\n      <TableHead>\n        <TableRow>\n          {!isReadOnly && !isReorderDisabled && <ActionColumnHeaderCell />}\n          {columns\n            .filter((col) => !col.isHidden)\n            .map((col, index) => (\n              <TableCell style={col.style} key={index}>\n                {col.label}\n              </TableCell>\n            ))}\n          {!isReadOnly && !isDeleteDisabled && <ActionColumnHeaderCell />}\n        </TableRow>\n      </TableHead>\n    )\n  }, [\n    columns,\n    isReadOnly,\n    isTableHeaderHidden,\n    isReorderDisabled,\n    isDeleteDisabled,\n  ])\n\n  const TableBodyElement = useMemo(() => {\n    if (isReadOnly || isReorderDisabled) {\n      return <TableBody>{children}</TableBody>\n    }\n\n    return (\n      <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\n        <Droppable droppableId={id}>\n          {(provided) => (\n            <TableBody ref={provided.innerRef} {...provided.droppableProps}>\n              {children}\n              {provided.placeholder}\n            </TableBody>\n          )}\n        </Droppable>\n      </DragDropContext>\n    )\n  }, [id, isReadOnly, isReorderDisabled, onDragEnd, onDragStart, children])\n\n  const TableFooterElement = useMemo(() => {\n    if (isReadOnly || isInsertDisabled) {\n      return null\n    }\n\n    return (\n      <TableFooter>\n        <InsertActionRow\n          isDisabled={isTemporaryReadOnly}\n          onInsert={onInsert}\n          colspan={insertActionRowColspan}\n        />\n      </TableFooter>\n    )\n  }, [isReadOnly, isInsertDisabled, onInsert, insertActionRowColspan])\n\n  return (\n    <Table size={tableSize}>\n      {TableHeaderElement}\n      {TableBodyElement}\n      {TableFooterElement}\n    </Table>\n  )\n}\n\nexport default SheetRenderer\n","import React, { FC, useMemo } from 'react'\nimport { DraggableProvidedDragHandleProps } from 'react-beautiful-dnd'\nimport TableCell from '@material-ui/core/TableCell'\nimport IconButton from '@material-ui/core/IconButton'\nimport ReorderIcon from '@material-ui/icons/Reorder'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useCellStyles = makeStyles(() => ({\n  root: {\n    textAlign: 'center',\n  },\n}))\n\nexport type ReorderActionCellProps = Partial<DraggableProvidedDragHandleProps>\n\nconst ReorderActionCell: FC<ReorderActionCellProps> = (props) => {\n  const cellClasses = useCellStyles()\n\n  const isDisabled = useMemo(() => {\n    return Object.keys(props).length === 0\n  }, [props])\n\n  return (\n    <TableCell classes={cellClasses} padding='checkbox'>\n      <IconButton {...props} disabled={isDisabled}>\n        <ReorderIcon />\n      </IconButton>\n    </TableCell>\n  )\n}\n\nexport default ReorderActionCell\n","import React, { FC, useCallback } from 'react'\nimport TableCell from '@material-ui/core/TableCell'\nimport IconButton from '@material-ui/core/IconButton'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useCellStyles = makeStyles(() => ({\n  root: {\n    textAlign: 'center',\n  },\n}))\n\nexport interface DeleteActionCellProps {\n  onDelete: () => void\n  isDisabled?: boolean\n}\n\nconst DeleteActionCell: FC<DeleteActionCellProps> = ({\n  onDelete,\n  isDisabled,\n}) => {\n  const cellClasses = useCellStyles()\n\n  const onButtonClick = useCallback(() => {\n    if (isDisabled) {\n      return\n    }\n\n    onDelete()\n  }, [isDisabled, onDelete])\n\n  return (\n    <TableCell classes={cellClasses} padding='checkbox'>\n      <IconButton disabled={isDisabled} onClick={onButtonClick}>\n        <DeleteIcon />\n      </IconButton>\n    </TableCell>\n  )\n}\n\nexport default DeleteActionCell\n","import React, { PropsWithChildren, useMemo, useCallback } from 'react'\nimport { Draggable } from 'react-beautiful-dnd'\nimport TableRow from '@material-ui/core/TableRow'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { Item, RowRendererProps } from '../interfaces'\n\nimport ReorderActionCell from '../components/ReorderActionCell'\nimport DeleteActionCell from '../components/DeleteActionCell'\n\nconst uesRowStyles = makeStyles((theme) => ({\n  root: {\n    '&$selected, &$selected:hover': {\n      display: 'table',\n      tableLayout: 'auto',\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n  selected: {},\n}))\n\nconst RowRenderer: <T extends Item>(\n  props: PropsWithChildren<RowRendererProps<T>>\n) => JSX.Element = ({ tableProps, onDelete, row, children }) => {\n  const {\n    id,\n    isReadOnly,\n    isTemporaryReadOnly,\n    isReorderDisabled,\n    isDeleteDisabled,\n  } = tableProps\n\n  const rowClasses = uesRowStyles()\n\n  const draggableId = useMemo(() => {\n    return `${id}_${row}`\n  }, [id, row])\n\n  const onDeleteActionCellDelete = useCallback(() => {\n    onDelete(row)\n  }, [onDelete, row])\n\n  if (isReadOnly || isReorderDisabled) {\n    return (\n      <TableRow classes={rowClasses}>\n        {children}\n        {!isReadOnly && !isDeleteDisabled && (\n          <DeleteActionCell\n            onDelete={onDeleteActionCellDelete}\n            isDisabled={isTemporaryReadOnly}\n          />\n        )}\n      </TableRow>\n    )\n  }\n\n  return (\n    <Draggable\n      draggableId={draggableId}\n      index={row}\n      isDragDisabled={isReorderDisabled || isTemporaryReadOnly}\n    >\n      {(provided, snapshot) => (\n        <TableRow\n          classes={rowClasses}\n          selected={snapshot.isDragging}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n        >\n          <ReorderActionCell {...provided.dragHandleProps} />\n          {children}\n          {!isDeleteDisabled && (\n            <DeleteActionCell\n              onDelete={onDeleteActionCellDelete}\n              isDisabled={isTemporaryReadOnly}\n            />\n          )}\n        </TableRow>\n      )}\n    </Draggable>\n  )\n}\n\nexport default RowRenderer\n","import React, { PropsWithChildren, useState, useMemo, useEffect } from 'react'\nimport TableCell from '@material-ui/core/TableCell'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { lighten } from '@material-ui/core/styles/colorManipulator'\nimport { CSSProperties } from '@material-ui/core/styles/withStyles'\n\nimport { Item, CellRendererProps } from '../interfaces'\n\nconst useCellStyles = makeStyles((theme) => ({\n  root: {\n    position: 'relative',\n    cursor: 'cell',\n    '&:hover': {\n      backgroundColor: lighten(theme.palette.action.hover, 0.5),\n    },\n  },\n}))\n\nconst useRendererStyles = makeStyles((theme) => ({\n  selected: {\n    backgroundColor: theme.palette.action.hover,\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n  editing: {\n    backgroundColor: theme.palette.action.hover,\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n  readOnly: {\n    cursor: 'default',\n    color: lighten(theme.palette.text.primary, 0.25),\n  },\n  error: {\n    '&:before': {\n      content: '\"\"',\n      position: 'absolute',\n      display: 'block',\n      top: 0,\n      right: 0,\n      borderTop: `.5rem solid ${theme.palette.error.main}`,\n      borderLeft: '.5rem solid transparent',\n    },\n  },\n}))\n\nconst CellRenderer: <T extends Item>(\n  props: PropsWithChildren<CellRendererProps<T>>\n) => JSX.Element = ({\n  tableProps,\n  cell,\n  row,\n  col,\n  selected,\n  editing,\n  onMouseDown,\n  onMouseOver,\n  onContextMenu,\n  onDoubleClick,\n  children,\n}) => {\n  const { items, columns, isReadOnly, isTemporaryReadOnly } = tableProps\n\n  const cellClasses = useCellStyles()\n  const rendererClasses = useRendererStyles()\n\n  const [errorMessage, setErrorMessage] = useState<string | undefined>(\n    undefined\n  )\n\n  const item = useMemo(() => {\n    return items[row]\n  }, [items, row])\n\n  const column = useMemo(() => {\n    return columns.filter((column) => !column.isHidden)[col]\n  }, [columns, col])\n\n  const rendererClassName = useMemo(() => {\n    const classes = []\n\n    if (editing) {\n      classes.push(rendererClasses.editing)\n    } else if (selected) {\n      classes.push(rendererClasses.selected)\n    }\n\n    if (!!errorMessage && !editing) {\n      classes.push(rendererClasses.error)\n    }\n\n    if (isReadOnly || isTemporaryReadOnly || column.isReadOnly) {\n      classes.push(rendererClasses.readOnly)\n    }\n\n    return classes.join(' ')\n  }, [\n    isReadOnly,\n    isTemporaryReadOnly,\n    selected,\n    editing,\n    rendererClasses,\n    errorMessage,\n    column.isReadOnly,\n  ])\n\n  const cellStyle = useMemo(() => {\n    const { width, minWidth, maxWidth, textAlign } = column.style || {}\n\n    let style: CSSProperties = {\n      width,\n      minWidth,\n      maxWidth,\n      textAlign,\n    }\n\n    switch (column.overflow || 'wrap') {\n      case 'wrap':\n        style = {\n          ...style,\n          whiteSpace: 'normal',\n          overflowWrap: 'anywhere',\n        }\n        break\n      case 'nowrap':\n        style = {\n          ...style,\n          whiteSpace: 'nowrap',\n          overflowX: 'visible',\n        }\n        break\n      case 'clip':\n        style = {\n          ...style,\n          whiteSpace: 'nowrap',\n          overflowX: 'hidden',\n          textOverflow: 'clip',\n        }\n        break\n      case 'ellipsis':\n        style = {\n          ...style,\n          whiteSpace: 'nowrap',\n          overflowX: 'hidden',\n          textOverflow: 'ellipsis',\n        }\n        break\n    }\n\n    return style\n  }, [column.style, column.overflow])\n\n  const padding = useMemo(() => {\n    return column.valueType === 'boolean' ? 'checkbox' : 'default'\n  }, [column.valueType])\n\n  const CellElement = useMemo(() => {\n    return (\n      <TableCell\n        classes={cellClasses}\n        className={rendererClassName}\n        style={cellStyle}\n        padding={padding}\n        onMouseDown={onMouseDown}\n        onMouseOver={onMouseOver}\n        onContextMenu={onContextMenu}\n        onDoubleClick={onDoubleClick}\n      >\n        {children}\n      </TableCell>\n    )\n  }, [\n    onMouseDown,\n    onMouseOver,\n    onContextMenu,\n    onDoubleClick,\n    children,\n    cellClasses,\n    rendererClassName,\n    cellStyle,\n    padding,\n  ])\n\n  useEffect(() => {\n    const errorMessage =\n      column.validate && column.validate(cell.value, item, items)\n    setErrorMessage(errorMessage)\n  }, [items, cell.value, item, column])\n\n  if (editing || typeof errorMessage === 'undefined') {\n    return CellElement\n  }\n\n  return (\n    <Tooltip title={errorMessage} placement='top-end'>\n      {CellElement}\n    </Tooltip>\n  )\n}\n\nexport default CellRenderer\n","import React, { useMemo } from 'react'\nimport { CSSProperties } from '@material-ui/core/styles/withStyles'\n\nimport { Item, ValueViewerProps } from '../interfaces'\n\nconst ValueViewer: <T extends Item>(\n  props: ValueViewerProps<T>\n) => JSX.Element = ({ tableProps, cell, value, col }) => {\n  const { columns } = tableProps\n\n  const column = useMemo(() => {\n    return columns.filter((column) => !column.isHidden)[col]\n  }, [columns, col])\n\n  const viewerStyle = useMemo(() => {\n    let style: CSSProperties = {\n      display: 'inline-block',\n    }\n\n    if (cell.valueType === 'boolean') {\n      style = {\n        ...style,\n        width: '24px',\n        textAlign: 'center',\n      }\n    }\n\n    return style\n  }, [cell.valueType])\n\n  const formatedValue = useMemo(() => {\n    if (!column.formatViewerValue) {\n      return value\n    }\n\n    return column.formatViewerValue(cell.value)\n  }, [cell.value, value, column.formatViewerValue])\n\n  return <span style={viewerStyle}>{formatedValue}</span>\n}\n\nexport default ValueViewer\n","import React, {\n  ChangeEventHandler,\n  FocusEventHandler,\n  useState,\n  useMemo,\n  useRef,\n  useCallback,\n  useEffect,\n} from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { Item, ItemValue, ItemValueType, DataEditorProps } from '../interfaces'\n\nconst useTextFieldStyles = makeStyles(() => ({\n  root: {\n    width: '100%',\n    marginTop: '-4px',\n    marginBottom: '-8px',\n  },\n}))\n\nconst useInputPropsStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: theme.typography.fontSize,\n  },\n}))\n\nconst parseInputValue: (\n  value: string,\n  valueType: ItemValueType\n) => ItemValue = (value, valueType) => {\n  switch (valueType) {\n    case 'string':\n      return value.length > 0 ? value : null\n    case 'number':\n      return value.length > 0 ? Number(value) : null\n    default:\n      return null\n  }\n}\n\nconst DataEditorTextField: <T extends Item>(\n  props: DataEditorProps<T>\n) => JSX.Element = ({\n  tableProps,\n  cell,\n  row,\n  col,\n  onChange,\n  onRevert,\n  onKeyDown,\n}) => {\n  const { items, columns, onBeginEditing, onEndEditing } = tableProps\n\n  const textFieldClasses = useTextFieldStyles()\n  const inputPropsClasses = useInputPropsStyles()\n\n  const [errorMessage, setErrorMessage] = useState<string | undefined>(\n    undefined\n  )\n\n  const item = useMemo(() => {\n    return items[row]\n  }, [items, row])\n\n  const column = useMemo(() => {\n    return columns.filter((column) => !column.isHidden)[col]\n  }, [columns, col])\n\n  const defaultValue = useMemo(() => cell.value, [cell.value])\n\n  const inputType = useMemo(() => {\n    return cell.valueType === 'number' ? 'number' : column.inputType\n  }, [cell.valueType, column.inputType])\n\n  const inputPropsRef = useRef<HTMLInputElement>()\n\n  const onInputChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      const value = parseInputValue(event.target.value, cell.valueType)\n\n      const errorMessage =\n        column.validate && column.validate(value, item, items)\n      setErrorMessage(errorMessage)\n\n      if (!errorMessage) {\n        onChange(value)\n      }\n    },\n    [items, cell.valueType, onChange, item, column.validate]\n  )\n\n  const onInputPropsBlur = useCallback<\n    FocusEventHandler<HTMLInputElement>\n  >(() => {\n    onRevert()\n  }, [onRevert])\n\n  useEffect(() => {\n    const errorMessage =\n      column.validate && column.validate(cell.value, item, items)\n    setErrorMessage(errorMessage)\n  }, [items, cell.value, item, column.validate])\n\n  useEffect(() => {\n    inputPropsRef.current && inputPropsRef.current.focus()\n  }, [inputPropsRef])\n\n  useEffect(() => {\n    onBeginEditing && onBeginEditing({ index: row })\n\n    return () => {\n      onEndEditing && onEndEditing({ index: row })\n    }\n  }, [row, onBeginEditing, onEndEditing])\n\n  return (\n    <TextField\n      classes={textFieldClasses}\n      defaultValue={defaultValue}\n      type={inputType}\n      error={!!errorMessage}\n      helperText={errorMessage}\n      onChange={onInputChange}\n      onKeyDown={onKeyDown}\n      inputProps={{\n        ref: inputPropsRef,\n        className: inputPropsClasses.root,\n        onBlur: onInputPropsBlur,\n      }}\n    />\n  )\n}\n\nexport default DataEditorTextField\n","import React, {\n  MouseEventHandler,\n  KeyboardEventHandler,\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n} from 'react'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { Item, ItemValue, ItemValueType, DataEditorProps } from '../interfaces'\n\nconst useRootStyles = makeStyles(() => ({\n  root: {\n    marginTop: '-4px',\n    marginBottom: '-8px',\n  },\n}))\n\nconst useSelectStyles = makeStyles(() => ({\n  root: {\n    fontSize: '0.875rem',\n    marginTop: '-2px',\n    marginBottom: '-1px',\n  },\n}))\n\nconst parseTargetValue: (\n  value: string,\n  valueType: ItemValueType\n) => ItemValue = (value, valueType) => {\n  switch (valueType) {\n    case 'string':\n      return value !== '__EMPTY__' ? value : null\n    case 'number':\n      return value !== '__EMPTY__' ? Number(value) : null\n    default:\n      return null\n  }\n}\n\nconst DataEditorSelect: <T extends Item>(\n  props: DataEditorProps<T>\n) => JSX.Element = ({ tableProps, cell, row, col, onCommit, onRevert }) => {\n  const { columns, onBeginEditing, onEndEditing } = tableProps\n\n  const rootClasses = useRootStyles()\n  const selectClasses = useSelectStyles()\n\n  const [isOpen, setIsOpen] = useState(false)\n\n  const column = useMemo(() => {\n    return columns.filter((column) => !column.isHidden)[col]\n  }, [columns, col])\n\n  const onMenuItemMouseDown = useCallback<MouseEventHandler<HTMLLIElement>>(\n    (event) => {\n      event.stopPropagation()\n\n      const targetValue = (event.target as HTMLLIElement).dataset.value\n\n      if (typeof targetValue === 'undefined') {\n        return\n      }\n\n      const parsedValue = parseTargetValue(targetValue, cell.valueType)\n\n      let value\n      if (!column.isRequired) {\n        if (cell.value !== parsedValue) {\n          value = parsedValue\n        } else {\n          value = null\n        }\n      } else {\n        value = parsedValue\n      }\n\n      onCommit(value)\n      setIsOpen(false)\n    },\n    [cell.value, cell.valueType, onCommit, column.isRequired]\n  )\n\n  const onMenuItemKeyDown = useCallback<KeyboardEventHandler<HTMLLIElement>>(\n    (event) => {\n      switch (event.key) {\n        case 'Enter':\n          {\n            event.stopPropagation()\n\n            const targetValue = (event.target as HTMLLIElement).dataset.value\n\n            if (typeof targetValue === 'undefined') {\n              return\n            }\n\n            const parsedValue = parseTargetValue(targetValue, cell.valueType)\n\n            let value\n            if (!column.isRequired) {\n              if (cell.value !== parsedValue) {\n                value = parsedValue\n              } else {\n                value = null\n              }\n            } else {\n              value = parsedValue\n            }\n\n            onCommit(value)\n            setIsOpen(false)\n          }\n          break\n        case 'Escape':\n          event.stopPropagation()\n          onRevert()\n          setIsOpen(false)\n          break\n      }\n    },\n    [cell.value, cell.valueType, onCommit, onRevert, column.isRequired]\n  )\n\n  useEffect(() => {\n    setIsOpen(true)\n  }, [])\n\n  useEffect(() => {\n    onBeginEditing && onBeginEditing({ index: row })\n\n    return () => {\n      onEndEditing && onEndEditing({ index: row })\n    }\n  }, [row, onBeginEditing, onEndEditing])\n\n  if (!column.enum) {\n    throw new Error('Never')\n  }\n\n  return (\n    <div className={rootClasses.root}>\n      <Select\n        classes={selectClasses}\n        value={cell.value !== null ? cell.value : '__EMPTY__'}\n        open={isOpen}\n      >\n        {!column.isRequired && (\n          <MenuItem\n            value='__EMPTY__'\n            onMouseDown={onMenuItemMouseDown}\n            onKeyDown={onMenuItemKeyDown}\n          >\n            &nbsp;\n          </MenuItem>\n        )}\n        {column.enum.map((e) => (\n          <MenuItem\n            value={e}\n            key={e}\n            onMouseDown={onMenuItemMouseDown}\n            onKeyDown={onMenuItemKeyDown}\n          >\n            {e}\n          </MenuItem>\n        ))}\n      </Select>\n    </div>\n  )\n}\n\nexport default DataEditorSelect\n","import React, {\n  RefObject,\n  MouseEventHandler,\n  KeyboardEventHandler,\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n} from 'react'\nimport Checkbox from '@material-ui/core/Checkbox'\n\nimport { Item, DataEditorProps } from '../interfaces'\n\nconst DataEditorCheckbox: <T extends Item>(\n  props: DataEditorProps<T>\n) => JSX.Element = ({ tableProps, cell, row, onCommit, onRevert }) => {\n  const { onBeginEditing, onEndEditing } = tableProps\n\n  const [isIndeterminate, setIsIndeterminate] = useState(cell.value === null)\n\n  const checkboxInputRef = useRef<HTMLInputElement>() as RefObject<HTMLInputElement>\n\n  const onCheckboxMouseDown = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    (event) => {\n      event.stopPropagation()\n\n      if (cell.value === null) {\n        onCommit(true)\n        return\n      }\n\n      onCommit(!cell.value)\n    },\n    [cell.value, onCommit]\n  )\n\n  const onCheckboxKeyDown = useCallback<\n    KeyboardEventHandler<HTMLButtonElement>\n  >(\n    (event) => {\n      if (!checkboxInputRef.current) {\n        return\n      }\n\n      switch (event.key) {\n        case 'Enter':\n          {\n            event.preventDefault()\n            const value = checkboxInputRef.current.checked\n            onCommit(value)\n          }\n          break\n        case 'Escape':\n          onRevert()\n          break\n        case 'Tab':\n          event.preventDefault()\n          break\n      }\n    },\n    [onCommit, onRevert, checkboxInputRef]\n  )\n\n  const onCheckboxChange = useCallback(() => {\n    setIsIndeterminate(false)\n  }, [])\n\n  useEffect(() => {\n    checkboxInputRef.current && checkboxInputRef.current.focus()\n  }, [checkboxInputRef])\n\n  useEffect(() => {\n    onBeginEditing && onBeginEditing({ index: row })\n\n    return () => {\n      onEndEditing && onEndEditing({ index: row })\n    }\n  }, [row, onBeginEditing, onEndEditing])\n\n  return (\n    <Checkbox\n      defaultChecked={typeof cell.value === 'boolean' && cell.value}\n      indeterminate={isIndeterminate}\n      inputRef={checkboxInputRef}\n      onMouseDown={onCheckboxMouseDown}\n      onKeyDown={onCheckboxKeyDown}\n      onChange={onCheckboxChange}\n    />\n  )\n}\n\nexport default DataEditorCheckbox\n","import React, { useMemo } from 'react'\n\nimport { Item, DataEditorProps } from '../interfaces'\n\nimport DataEditorTextField from './DataEditorTextField'\nimport DataEditorSelect from './DataEditorSelect'\nimport DataEditorCheckbox from './DataEditorCheckbox'\n\nconst DataEditor: <T extends Item>(props: DataEditorProps<T>) => JSX.Element = (\n  props\n) => {\n  const { columns } = props.tableProps\n\n  const column = useMemo(() => {\n    return columns.filter((column) => !column.isHidden)[props.col]\n  }, [columns, props.col])\n\n  if (column.valueType === 'boolean') {\n    return <DataEditorCheckbox {...props} />\n  } else if (column.enum) {\n    return <DataEditorSelect {...props} />\n  } else {\n    return <DataEditorTextField {...props} />\n  }\n}\n\nexport default DataEditor\n","import React from 'react'\n\nimport { ModelessDataTableProps, Item } from './interfaces'\n\nimport DataSheet from './datasheet-components/DataSheet'\nimport valueRenderer from './datasheet-components/value-renderer'\n\nimport useData from './hooks/useData'\nimport useSheetRenderer from './hooks/useSheetRenderer'\nimport useRowRenderer from './hooks/useRowRenderer'\nimport useCellRenderer from './hooks/useCellRenderer'\nimport useValueViewer from './hooks/useValueViewer'\nimport useDataEditor from './hooks/useDataEditor'\n\nimport './index.css'\n\nexport * from './interfaces'\n\nconst ModelessDataTable = <T extends Item>(\n  props: ModelessDataTableProps<T>\n): JSX.Element => {\n  const { data, onCellsChanged, onDragEnd, onDelete, onInsert } = useData(props)\n\n  const sheetRenderer = useSheetRenderer({\n    tableProps: props,\n    onDragEnd,\n    onInsert,\n  })\n\n  const rowRenderer = useRowRenderer({\n    tableProps: props,\n    onDelete,\n  })\n\n  const cellRenderer = useCellRenderer({\n    tableProps: props,\n  })\n\n  const valueViewer = useValueViewer({\n    tableProps: props,\n  })\n\n  const dataEditor = useDataEditor({\n    tableProps: props,\n  })\n\n  return (\n    <DataSheet\n      data={data}\n      valueRenderer={valueRenderer}\n      onCellsChanged={onCellsChanged}\n      sheetRenderer={sheetRenderer}\n      rowRenderer={rowRenderer}\n      cellRenderer={cellRenderer}\n      valueViewer={valueViewer}\n      dataEditor={dataEditor}\n    />\n  )\n}\n\nexport default ModelessDataTable\n","import React from 'react'\n\nimport { Item, SheetRendererProps, DataSheetSheetRenderer } from '../interfaces'\n\nimport SheetRenderer from '../datasheet-components/SheetRenderer'\n\nconst useSheetRenderer = <T extends Item>(\n  params: Pick<SheetRendererProps<T>, 'tableProps' | 'onDragEnd' | 'onInsert'>\n): DataSheetSheetRenderer => (props) => {\n  return <SheetRenderer {...params} {...props} />\n}\n\nexport default useSheetRenderer\n","import React from 'react'\n\nimport { Item, RowRendererProps, DataSheetRowRenderer } from '../interfaces'\n\nimport RowRenderer from '../datasheet-components/RowRenderer'\n\nconst useRowRenderer = <T extends Item>(\n  params: Pick<RowRendererProps<T>, 'tableProps' | 'onDelete'>\n): DataSheetRowRenderer => (props) => {\n  return <RowRenderer {...params} {...props} />\n}\n\nexport default useRowRenderer\n","import React from 'react'\n\nimport { Item, CellRendererProps, DataSheetCellRenderer } from '../interfaces'\n\nimport CellRenderer from '../datasheet-components/CellRenderer'\n\nconst useCellRenderer = <T extends Item>(\n  params: Pick<CellRendererProps<T>, 'tableProps'>\n): DataSheetCellRenderer => (props) => {\n  return <CellRenderer {...params} {...props} />\n}\n\nexport default useCellRenderer\n","import React from 'react'\n\nimport { Item, ValueViewerProps, DataSheetValueViewer } from '../interfaces'\n\nimport ValueViewer from '../datasheet-components/ValueViewer'\n\nconst useValueViewer = <T extends Item>(\n  params: Pick<ValueViewerProps<T>, 'tableProps'>\n): DataSheetValueViewer => (props) => {\n  return <ValueViewer {...params} {...props} />\n}\n\nexport default useValueViewer\n","import React from 'react'\n\nimport { Item, DataEditorProps, DataSheetDataEditor } from '../interfaces'\n\nimport DataEditor from '../datasheet-components/DataEditor'\n\nconst useDataEditor = <T extends Item>(\n  params: Pick<DataEditorProps<T>, 'tableProps'>\n): DataSheetDataEditor => (props) => {\n  return <DataEditor {...params} {...props} />\n}\n\nexport default useDataEditor\n","import React, { ChangeEventHandler, useState, useMemo, useCallback, useEffect } from 'react'\n\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport Paper from '@material-ui/core/Paper'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport TableContainer from '@material-ui/core/TableContainer'\n\nimport ModelessDataTable, {\n  NullableItem,\n  Column,\n  ReorderHandler,\n  ChangeAtIndexHandler,\n  DeleteAtIndexHandler,\n  InsertAtLastHandler,\n  BeginEditingHandler,\n  EndEditingHandler,\n} from 'material-modeless-data-table'\nimport 'material-modeless-data-table/dist/index.css'\n\ntype ExampleItem = {\n  a: string\n  b: string\n  hidden: string\n  c: number\n  d: boolean\n  e: string\n}\n\nconst App = () => {\n  const [isTableSizeSmall, setIsTableSizeSmall] = useState(false)\n  const [isReadOnly, setIsReadOnly] = useState(false)\n  const [isTemporaryReadOnly, setIsTemporaryReadOnly] = useState(false)\n  const [isTableHeaderHidden, setIsTableHeaderHidden] = useState(false)\n  const [isReorderDisabled, setIsReorderDisabled] = useState(false)\n  const [isDeleteDisabled, setIsDeleteDisabled] = useState(false)\n  const [isInsertDisabled, setIsInsertDisabled] = useState(false)\n\n  const onTableSizeSwitchChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsTableSizeSmall(event.target.checked)\n    },\n    []\n  )\n\n  const onReadOnlySwitchChage = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsReadOnly(event.target.checked)\n    },\n    []\n  )\n\n  const onTemporaryReadOnlySwitchChage = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsTemporaryReadOnly(event.target.checked)\n    },\n    []\n  )\n\n  const onTableHeaderHiddenSwitchChage = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsTableHeaderHidden(event.target.checked)\n    },\n    []\n  )\n\n  const onReorderDisabledSwitchChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsReorderDisabled(event.target.checked)\n    },\n    []\n  )\n\n  const onDeleteDisabledSwitchChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsDeleteDisabled(event.target.checked)\n    },\n    []\n  )\n\n  const onInsertDisabledSwitchChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsInsertDisabled(event.target.checked)\n    },\n    []\n  )\n\n  const [items, setItems] = useState<NullableItem<ExampleItem>[]>(() => {\n    return [\n      {\n        a: 'a0',\n        b: 'b0',\n        hidden: 'this param is hidden',\n        c: 0,\n        d: true,\n        e: new Date().toISOString(),\n      },\n      {\n        a: 'a1',\n        b: 'b1',\n        hidden: 'this param is hidden',\n        c: 1,\n        d: false,\n        e: new Date().toISOString(),\n      },\n      {\n        a: 'a2',\n        b: 'b2',\n        hidden: 'this param is hidden',\n        c: 2,\n        d: null,\n        e: new Date().toISOString(),\n      }\n    ]\n  })\n\n  const columns = useMemo<Column<ExampleItem>[]>(() => {\n    return [\n      {\n        keyProp: 'a',\n        valueType: 'string',\n        validate: (value, _, items) => {\n          if (value === null) {\n            return 'Required'\n          }\n\n          if (items.filter(item => item.a === value).length > 1) {\n            return 'Duplicated'\n          }\n\n          return undefined\n        },\n        label: 'A',\n        isRequired: true,\n        style: {\n          minWidth: '12rem',\n        }\n      },\n      {\n        keyProp: 'b',\n        valueType: 'string',\n        enum: ['b0', 'b1', 'b2', 'b3', 'b4'],\n        label: 'B',\n        style: {\n          width: '12rem',\n          minWidth: '12rem',\n        }\n      },\n      {\n        keyProp: 'hidden',\n        valueType: 'string',\n        defualtValue: 'this param is hidden',\n        isHidden: true,\n      },\n      {\n        keyProp: 'c',\n        valueType: 'number',\n        label: 'C',\n        style: {\n          width: '12rem',\n          minWidth: '12rem',\n          textAlign: 'right'\n        }\n      },\n      {\n        keyProp: 'd',\n        valueType: 'boolean',\n        label: 'D',\n        style: {\n          width: '8rem',\n          minWIdth: '8rem',\n          textAlign: 'center'\n        }\n      },\n      {\n        keyProp: 'e',\n        valueType: 'string',\n        formatViewerValue: (value) => {\n          return new Date(value as string).toLocaleString()\n        },\n        defualtValue: () => new Date().toISOString(),\n        label: 'E',\n        isReadOnly: true,\n        style: {\n          width: '12rem',\n          minWidth: '12rem'\n        }\n      }\n    ]\n  }, [])\n\n  const onReorder = useCallback<ReorderHandler<ExampleItem>>(\n    ({ items }) => {\n      setItems(items)\n    },\n    []\n  )\n\n  const onChangeAtIndex = useCallback<ChangeAtIndexHandler<ExampleItem>>(\n    ({ newItem, index }) => {\n      const updatedItems = items.map((item, i) => {\n        if (i !== index) {\n          return item\n        }\n\n        return newItem\n      })\n\n      setItems(updatedItems)\n    },\n    [items]\n  )\n\n  const onDeleteAtIndex = useCallback<DeleteAtIndexHandler<ExampleItem>>(\n    ({ index }) => {\n      const updatedItems = items.filter((_, i) => i !== index)\n\n      setItems(updatedItems)\n    },\n    [items]\n  )\n\n  const onInsertAtLast = useCallback<InsertAtLastHandler<ExampleItem>>(\n    ({ newItem }) => {\n      const updatedItems = [...items, newItem]\n\n      setItems(updatedItems)\n    },\n    [items]\n  )\n\n  const onBeginEditing = useCallback<BeginEditingHandler>(\n    ({ index }) => {\n      console.log(`Begin editing: ${index}`)\n    },\n    []\n  )\n\n  const onEndEditing = useCallback<EndEditingHandler>(\n    ({ index }) => {\n      console.log(`End editing: ${index}`)\n    },\n    []\n  )\n\n  useEffect(() => {\n    console.log(items)\n  }, [items])\n\n  return (\n    <Container>\n      <Box marginY={2}>\n        <Paper>\n          <Box padding={2}>\n            <FormGroup row>\n              <FormControlLabel\n                control={<Switch checked={isTableSizeSmall} onChange={onTableSizeSwitchChange} />}\n                label=\"Small\"\n              />\n\n              <FormControlLabel\n                control={<Switch checked={isTableHeaderHidden} onChange={onTableHeaderHiddenSwitchChage} />}\n                label=\"isTableHeaderHidden\"\n              />\n            </FormGroup>\n\n            <FormGroup row>\n              <FormControlLabel\n                control={<Switch checked={isReadOnly} onChange={onReadOnlySwitchChage} />}\n                label=\"isReadOnly\"\n              />\n\n              <FormControlLabel\n                control={<Switch checked={isTemporaryReadOnly} onChange={onTemporaryReadOnlySwitchChage} />}\n                label=\"isTemporaryReadOnly\"\n              />\n\n              <FormControlLabel\n                control={<Switch checked={isReorderDisabled} onChange={onReorderDisabledSwitchChange} />}\n                label=\"isReorderDisabled\"\n              />\n\n              <FormControlLabel\n                control={<Switch checked={isDeleteDisabled} onChange={onDeleteDisabledSwitchChange} />}\n                label=\"isDeleteDisabled\"\n              />\n\n              <FormControlLabel\n                control={<Switch checked={isInsertDisabled} onChange={onInsertDisabledSwitchChange} />}\n                label=\"isInsertDisabled\"\n              />\n            </FormGroup>\n          </Box>\n        </Paper>\n      </Box>\n\n      <TableContainer component={Paper}>\n        <ModelessDataTable<ExampleItem>\n          id=\"example\"\n          items={items}\n          columns={columns}\n          onReorder={onReorder}\n          onChangeAtIndex={onChangeAtIndex}\n          onDeleteAtIndex={onDeleteAtIndex}\n          onInsertAtLast={onInsertAtLast}\n          onBeginEditing={onBeginEditing}\n          onEndEditing={onEndEditing}\n          tableSize={isTableSizeSmall ? 'small' : 'medium'}\n          isReadOnly={isReadOnly}\n          isTemporaryReadOnly={isTemporaryReadOnly}\n          isTableHeaderHidden={isTableHeaderHidden}\n          isReorderDisabled={isReorderDisabled}\n          isDeleteDisabled={isDeleteDisabled}\n          isInsertDisabled={isInsertDisabled}\n        />\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default App\n","import React, { Fragment } from 'react'\nimport ReactDOM from 'react-dom'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport App from './App'\n\nReactDOM.render(\n  <Fragment>\n    <CssBaseline />\n    <App />\n  </Fragment>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}