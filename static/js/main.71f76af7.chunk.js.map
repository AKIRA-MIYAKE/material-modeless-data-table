{"version":3,"sources":["../../src/datasheet-components/DataSheet.tsx","../../src/datasheet-components/value-renderer.ts","../../src/hooks/useData.ts","../../src/components/ActionColumnHeaderCell.tsx","../../src/components/InsertActionRow.tsx","../../src/datasheet-components/SheetRenderer.tsx","../../src/components/ReorderActionCell.tsx","../../src/components/DeleteActionCell.tsx","../../src/datasheet-components/RowRenderer.tsx","../../src/datasheet-components/CellRenderer.tsx","../../src/datasheet-components/ValueViewer.tsx","../../src/datasheet-components/DataEditorTextField.tsx","../../src/datasheet-components/DataEditorSelect.tsx","../../src/datasheet-components/DataEditorCheckbox.tsx","../../src/datasheet-components/DataEditor.tsx","../../src/index.tsx","../../src/hooks/useSheetRenderer.tsx","../../src/hooks/useRowRenderer.tsx","../../src/hooks/useCellRenderer.tsx","../../src/hooks/useValueViewer.tsx","../../src/hooks/useDataEditor.tsx","App.tsx","index.tsx"],"names":["DataSheet","ReactDataSheet","valueRenderer","value","valueType","useData","id","params","items","columns","isReadOnly","onReorder","onChangeAtIndex","onDeleteAtIndex","onInsertAtLast","data","useMemo","item","index","column","key","readOnly","itemToRowCells","onCellsChanged","useCallback","changes","row","change","col","oldItem","updatedValue","newItem","onDragEnd","event","destIndex","srcIndex","targetItem","updatedItems","onDelete","onInsert","current","createItem","ActionColumnHeaderCell","padding","useCellStyles","makeStyles","root","paddingTop","theme","paddingBottom","InsertActionRow","colspan","cellClasses","onButtoNClick","React","classes","colSpan","variant","color","size","onClick","SheetRenderer","tableProps","children","tableSize","isTableHeaderHidden","isReorderDisabled","isDeleteDisabled","isInsertDisabled","insertActionRowColspan","onDragStart","activeElement","document","TableHeaderElement","style","TableBodyElement","droppableId","ref","provided","innerRef","TableFooterElement","textAlign","ReorderActionCell","props","DeleteActionCell","onButtonClick","uesRowStyles","display","tableLayout","backgroundColor","hover","selected","RowRenderer","rowClasses","draggableId","onDeleteActionCellDelete","isDragDisabled","snapshot","isDragging","position","cursor","lighten","useRendererStyles","editing","error","content","top","right","borderTop","borderLeft","CellRenderer","cell","onMouseDown","onMouseOver","onContextMenu","onDoubleClick","rendererClasses","useState","errorMessage","setErrorMessage","rendererClassName","cellStyle","width","minWidth","maxWidth","whiteSpace","overflowWrap","overflowX","textOverflow","CellElement","className","useEffect","title","placement","ValueViewer","viewerStyle","formatedValue","useTextFieldStyles","marginTop","marginBottom","useInputPropsStyles","fontSize","DataEditorTextField","onChange","onRevert","onKeyDown","textFieldClasses","inputPropsClasses","defaultValue","inputType","inputPropsRef","useRef","onInputChange","Number","parseInputValue","onInputPropsBlur","type","helperText","inputProps","onBlur","useRootStyles","useSelectStyles","parseTargetValue","DataEditorSelect","onCommit","rootClasses","selectClasses","isOpen","setIsOpen","onMenuItemMouseDown","targetValue","parsedValue","onMenuItemKeyDown","Error","open","e","DataEditorCheckbox","isIndeterminate","setIsIndeterminate","checkboxInputRef","onCheckboxMouseDown","onCheckboxKeyDown","onCheckboxChange","defaultChecked","indeterminate","inputRef","DataEditor","sheetRenderer","rowRenderer","useRowRenderer","cellRenderer","useCellRenderer","valueViewer","useValueViewer","dataEditor","useDataEditor","App","isTableSizeSmall","setIsTableSizeSmall","setIsReadOnly","setIsTableHeaderHidden","setIsReorderDisabled","setIsDeleteDisabled","setIsInsertDisabled","onTableSizeSwitchChange","target","checked","onReadOnlySwitchChage","onTableHeaderHiddenSwitchChage","onReorderDisabledSwitchChange","onDeleteDisabledSwitchChange","onInsertDisabledSwitchChange","a","b","hidden","c","d","Date","toISOString","setItems","keyProp","validate","_","filter","length","label","isRequired","enum","defualtValue","isHidden","minWIdth","formatViewerValue","toLocaleString","map","i","console","log","Container","Box","marginY","Paper","FormGroup","FormControlLabel","control","Switch","TableContainer","component","ReactDOM","render","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.71f76af7.chunk.js","sourcesContent":["import ReactDataSheet from 'react-datasheet'\n\nimport type { ItemValue, DataSheetCell } from '../interfaces'  // eslint-disable-line\n\nexport default class DataSheet extends ReactDataSheet<\n  DataSheetCell,\n  ItemValue\n> {}\n","import { DataSheetValueRenderer } from '../interfaces'\n\nconst valueRenderer: DataSheetValueRenderer = ({ value, valueType }) => {\n  switch (valueType) {\n    case 'string':\n      return value as string | null\n    case 'number':\n      return value as number | null\n    case 'boolean':\n      if (value === null) {\n        return '━'\n      } else {\n        return value ? '✔︎' : null\n      }\n  }\n}\n\nexport default valueRenderer\n","import { useMemo, useCallback } from 'react'\n\nimport {\n  ModelessDataTableProps,\n  NullableItem,\n  Item,\n  ItemValue,\n  Column,\n  SheetRendererProps,\n  RowRendererProps,\n  DataSheetCell,\n  DataSheetCellsChangedHandler,\n} from '../interfaces'\n\nexport const itemToRowCells = <T extends Item>(params: {\n  item: NullableItem<T>\n  index: number\n  id: string\n  columns: Column<T>[]\n  isReadOnly?: boolean\n}): DataSheetCell[] => {\n  const { item, index, id, columns, isReadOnly } = params\n\n  return columns\n    .filter((column) => !column.isHidden)\n    .map((column) => {\n      let value: ItemValue\n\n      if (typeof item[column.keyProp] === 'undefined') {\n        value = null\n      } else {\n        value = item[column.keyProp]\n      }\n\n      const key = `${id}_${column.keyProp}_${index}`\n\n      return {\n        value,\n        valueType: column.valueType,\n        key,\n        readOnly: isReadOnly || column.isReadOnly,\n        ...column.cell,\n      }\n    })\n}\n\nexport const createItem = <T extends Item>(params: {\n  columns: Column<T>[]\n}): NullableItem<T> => {\n  const { columns } = params\n\n  return columns.reduce((acc, current) => {\n    let value: ItemValue = null\n\n    if (current.defualtValue) {\n      if (typeof current.defualtValue === 'function') {\n        value = current.defualtValue()\n      } else {\n        value = current.defualtValue\n      }\n    }\n\n    return {\n      ...acc,\n      [current.keyProp]: value,\n    }\n  }, {} as NullableItem<T>)\n}\n\nconst useData = <T extends Item>(\n  params: ModelessDataTableProps<T>\n): {\n  data: DataSheetCell[][]\n  onCellsChanged: DataSheetCellsChangedHandler\n  onDragEnd: SheetRendererProps<T>['onDragEnd']\n  onDelete: RowRendererProps<T>['onDelete']\n  onInsert: SheetRendererProps<T>['onInsert']\n} => {\n  const {\n    id,\n    items,\n    columns,\n    isReadOnly,\n    onReorder,\n    onChangeAtIndex,\n    onDeleteAtIndex,\n    onInsertAtLast,\n  } = params\n\n  const data = useMemo(() => {\n    return items.map((item, index) =>\n      itemToRowCells({\n        item,\n        index,\n        id,\n        columns,\n        isReadOnly,\n      })\n    )\n  }, [id, items, columns, isReadOnly])\n\n  const onCellsChanged = useCallback<DataSheetCellsChangedHandler>(\n    (changes) => {\n      if (!onChangeAtIndex) {\n        return\n      }\n\n      changes.forEach((change) => {\n        const { row, col, value } = change\n\n        const index = row\n        const oldItem = items[index]\n        const column = columns.filter((column) => !column.isHidden)[col]\n\n        let updatedValue = value\n        if (typeof updatedValue === 'string' && updatedValue.length === 0) {\n          updatedValue = null\n        }\n\n        if (column.isRequired && updatedValue === null) {\n          return\n        }\n\n        if (column.validate && column.validate(updatedValue, oldItem, items)) {\n          return\n        }\n\n        if (column.formatEditedValue) {\n          updatedValue = column.formatEditedValue(updatedValue)\n        }\n\n        const newItem = {\n          ...oldItem,\n          [column.keyProp]: updatedValue,\n        }\n\n        onChangeAtIndex({\n          newItem,\n          oldItem,\n          index,\n        })\n      })\n    },\n    [items, columns, data, onChangeAtIndex]\n  )\n\n  const onDragEnd = useCallback<SheetRendererProps<T>['onDragEnd']>(\n    (event) => {\n      if (!onReorder) {\n        return\n      }\n\n      if (event.reason === 'CANCEL') {\n        return\n      }\n\n      const destIndex = event.destination && event.destination.index\n      if (typeof destIndex === 'undefined') {\n        return\n      }\n\n      const srcIndex = event.source.index\n\n      if (srcIndex === destIndex) {\n        return\n      }\n\n      const targetItem = items[srcIndex]\n      const updatedItems = items.filter((_, index) => index !== srcIndex)\n      updatedItems.splice(destIndex, 0, targetItem)\n\n      onReorder({ items: updatedItems, srcIndex, destIndex })\n    },\n    [items, onReorder]\n  )\n\n  const onDelete = useCallback<RowRendererProps<T>['onDelete']>(\n    (row) => {\n      if (!onDeleteAtIndex) {\n        return\n      }\n\n      const index = row\n      const oldItem = items[index]\n\n      onDeleteAtIndex({\n        oldItem,\n        index,\n      })\n    },\n    [items, onDeleteAtIndex]\n  )\n\n  const onInsert = useCallback<SheetRendererProps<T>['onInsert']>(() => {\n    if (!onInsertAtLast) {\n      return\n    }\n\n    const newItem = createItem({ columns })\n    const index = items.length\n\n    onInsertAtLast({\n      newItem,\n      index,\n    })\n  }, [items, columns, onInsertAtLast])\n\n  return {\n    data,\n    onCellsChanged,\n    onDragEnd,\n    onDelete,\n    onInsert,\n  }\n}\n\nexport default useData\n","import React, { FC } from 'react'\nimport TableCell from '@material-ui/core/TableCell'\n\nconst ActionColumnHeaderCell: FC = () => {\n  return <TableCell padding='checkbox' />\n}\n\nexport default ActionColumnHeaderCell\n","import React, { FC, useCallback } from 'react'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useCellStyles = makeStyles((theme) => ({\n  root: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n}))\n\nexport interface InsertActionRowProps {\n  colspan: number\n  onInsert: () => void\n}\n\nconst InsertActionRow: FC<InsertActionRowProps> = ({ colspan, onInsert }) => {\n  const cellClasses = useCellStyles()\n\n  const onButtoNClick = useCallback(() => {\n    onInsert()\n  }, [onInsert])\n\n  return (\n    <TableRow>\n      <TableCell classes={cellClasses} colSpan={colspan}>\n        <Button\n          variant='outlined'\n          color='primary'\n          size='small'\n          onClick={onButtoNClick}\n        >\n          Add\n        </Button>\n      </TableCell>\n    </TableRow>\n  )\n}\n\nexport default InsertActionRow\n","import React, { PropsWithChildren, useMemo, useCallback } from 'react'\nimport {\n  DragDropContextProps,\n  DragDropContext,\n  Droppable,\n} from 'react-beautiful-dnd'\nimport Table from '@material-ui/core/Table'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableFooter from '@material-ui/core/TableFooter'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\n\nimport { Item, SheetRendererProps } from '../interfaces'\n\nimport ActionColumnHeaderCell from '../components/ActionColumnHeaderCell'\nimport InsertActionRow from '../components/InsertActionRow'\n\nconst SheetRenderer: <T extends Item>(\n  props: PropsWithChildren<SheetRendererProps<T>>\n) => JSX.Element = ({ tableProps, onInsert, onDragEnd, children }) => {\n  const {\n    id,\n    columns,\n    tableSize,\n    isReadOnly,\n    isTableHeaderHidden,\n    isReorderDisabled,\n    isDeleteDisabled,\n    isInsertDisabled,\n  } = tableProps\n\n  const insertActionRowColspan = useMemo(() => {\n    const visibleColumns = columns.filter((col) => !col.isHidden)\n    let colspan = visibleColumns.length\n\n    if (isReadOnly) {\n      return colspan\n    }\n\n    if (!isReorderDisabled) {\n      colspan++\n    }\n\n    if (!isDeleteDisabled) {\n      colspan++\n    }\n\n    return colspan\n  }, [columns, isReadOnly, isReorderDisabled, isDeleteDisabled])\n\n  const onDragStart = useCallback<\n    NonNullable<DragDropContextProps['onDragEnd']>\n  >(() => {\n    const activeElement = document.activeElement\n    if (activeElement && activeElement instanceof HTMLElement) {\n      activeElement.blur()\n    }\n  }, [])\n\n  const TableHeaderElement = useMemo(() => {\n    if (isTableHeaderHidden) {\n      return null\n    }\n\n    return (\n      <TableHead>\n        <TableRow>\n          {!isReadOnly && !isReorderDisabled && <ActionColumnHeaderCell />}\n          {columns\n            .filter((col) => !col.isHidden)\n            .map((col, index) => (\n              <TableCell style={col.style} key={index}>\n                {col.label}\n              </TableCell>\n            ))}\n          {!isReadOnly && !isDeleteDisabled && <ActionColumnHeaderCell />}\n        </TableRow>\n      </TableHead>\n    )\n  }, [\n    columns,\n    isReadOnly,\n    isTableHeaderHidden,\n    isReorderDisabled,\n    isDeleteDisabled,\n  ])\n\n  const TableBodyElement = useMemo(() => {\n    if (isReadOnly || isReorderDisabled) {\n      return <TableBody>{children}</TableBody>\n    }\n\n    return (\n      <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\n        <Droppable droppableId={id}>\n          {(provided) => (\n            <TableBody ref={provided.innerRef} {...provided.droppableProps}>\n              {children}\n              {provided.placeholder}\n            </TableBody>\n          )}\n        </Droppable>\n      </DragDropContext>\n    )\n  }, [id, isReadOnly, isReorderDisabled, onDragEnd, onDragStart, children])\n\n  const TableFooterElement = useMemo(() => {\n    if (isReadOnly || isInsertDisabled) {\n      return null\n    }\n\n    return (\n      <TableFooter>\n        <InsertActionRow onInsert={onInsert} colspan={insertActionRowColspan} />\n      </TableFooter>\n    )\n  }, [isReadOnly, isInsertDisabled, onInsert, insertActionRowColspan])\n\n  return (\n    <Table size={tableSize}>\n      {TableHeaderElement}\n      {TableBodyElement}\n      {TableFooterElement}\n    </Table>\n  )\n}\n\nexport default SheetRenderer\n","import React, { FC } from 'react'\nimport { DraggableProvidedDragHandleProps } from 'react-beautiful-dnd'\nimport TableCell from '@material-ui/core/TableCell'\nimport IconButton from '@material-ui/core/IconButton'\nimport ReorderIcon from '@material-ui/icons/Reorder'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useCellStyles = makeStyles(() => ({\n  root: {\n    textAlign: 'center',\n  },\n}))\n\nexport type ReorderActionCellProps = Partial<DraggableProvidedDragHandleProps>\n\nconst ReorderActionCell: FC<ReorderActionCellProps> = (props) => {\n  const cellClasses = useCellStyles()\n\n  return (\n    <TableCell classes={cellClasses} padding='checkbox'>\n      <IconButton {...props}>\n        <ReorderIcon />\n      </IconButton>\n    </TableCell>\n  )\n}\n\nexport default ReorderActionCell\n","import React, { FC, useCallback } from 'react'\nimport TableCell from '@material-ui/core/TableCell'\nimport IconButton from '@material-ui/core/IconButton'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useCellStyles = makeStyles(() => ({\n  root: {\n    textAlign: 'center',\n  },\n}))\n\nexport interface DeleteActionCellProps {\n  onDelete: () => void\n}\n\nconst DeleteActionCell: FC<DeleteActionCellProps> = ({ onDelete }) => {\n  const cellClasses = useCellStyles()\n\n  const onButtonClick = useCallback(() => {\n    onDelete()\n  }, [onDelete])\n\n  return (\n    <TableCell classes={cellClasses} padding='checkbox'>\n      <IconButton onClick={onButtonClick}>\n        <DeleteIcon />\n      </IconButton>\n    </TableCell>\n  )\n}\n\nexport default DeleteActionCell\n","import React, { PropsWithChildren, useMemo, useCallback } from 'react'\nimport { Draggable } from 'react-beautiful-dnd'\nimport TableRow from '@material-ui/core/TableRow'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { Item, RowRendererProps } from '../interfaces'\n\nimport ReorderActionCell from '../components/ReorderActionCell'\nimport DeleteActionCell from '../components/DeleteActionCell'\n\nconst uesRowStyles = makeStyles((theme) => ({\n  root: {\n    '&$selected, &$selected:hover': {\n      display: 'table',\n      tableLayout: 'auto',\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n  selected: {},\n}))\n\nconst RowRenderer: <T extends Item>(\n  props: PropsWithChildren<RowRendererProps<T>>\n) => JSX.Element = ({ tableProps, onDelete, row, children }) => {\n  const { id, isReadOnly, isReorderDisabled, isDeleteDisabled } = tableProps\n\n  const rowClasses = uesRowStyles()\n\n  const draggableId = useMemo(() => {\n    return `${id}_${row}`\n  }, [id, row])\n\n  const onDeleteActionCellDelete = useCallback(() => {\n    onDelete(row)\n  }, [onDelete, row])\n\n  if (isReadOnly || isReorderDisabled) {\n    return (\n      <TableRow classes={rowClasses}>\n        {children}\n        {!isReadOnly && !isDeleteDisabled && (\n          <DeleteActionCell onDelete={onDeleteActionCellDelete} />\n        )}\n      </TableRow>\n    )\n  }\n\n  return (\n    <Draggable\n      draggableId={draggableId}\n      index={row}\n      isDragDisabled={isReorderDisabled}\n    >\n      {(provided, snapshot) => (\n        <TableRow\n          classes={rowClasses}\n          selected={snapshot.isDragging}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n        >\n          <ReorderActionCell {...provided.dragHandleProps} />\n          {children}\n          {!isDeleteDisabled && (\n            <DeleteActionCell onDelete={onDeleteActionCellDelete} />\n          )}\n        </TableRow>\n      )}\n    </Draggable>\n  )\n}\n\nexport default RowRenderer\n","import React, { PropsWithChildren, useState, useMemo, useEffect } from 'react'\nimport TableCell from '@material-ui/core/TableCell'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { lighten } from '@material-ui/core/styles/colorManipulator'\nimport { CSSProperties } from '@material-ui/core/styles/withStyles'\n\nimport { Item, CellRendererProps } from '../interfaces'\n\nconst useCellStyles = makeStyles((theme) => ({\n  root: {\n    position: 'relative',\n    cursor: 'cell',\n    '&:hover': {\n      backgroundColor: lighten(theme.palette.action.hover, 0.5),\n    },\n  },\n}))\n\nconst useRendererStyles = makeStyles((theme) => ({\n  selected: {\n    backgroundColor: theme.palette.action.hover,\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n  editing: {\n    backgroundColor: theme.palette.action.hover,\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n  readOnly: {\n    cursor: 'default',\n    color: lighten(theme.palette.text.primary, 0.25),\n  },\n  error: {\n    '&:before': {\n      content: '\"\"',\n      position: 'absolute',\n      display: 'block',\n      top: 0,\n      right: 0,\n      borderTop: `.5rem solid ${theme.palette.error.main}`,\n      borderLeft: '.5rem solid transparent',\n    },\n  },\n}))\n\nconst CellRenderer: <T extends Item>(\n  props: PropsWithChildren<CellRendererProps<T>>\n) => JSX.Element = ({\n  tableProps,\n  cell,\n  row,\n  col,\n  selected,\n  editing,\n  onMouseDown,\n  onMouseOver,\n  onContextMenu,\n  onDoubleClick,\n  children,\n}) => {\n  const { items, columns, isReadOnly } = tableProps\n\n  const cellClasses = useCellStyles()\n  const rendererClasses = useRendererStyles()\n\n  const [errorMessage, setErrorMessage] = useState<string | undefined>(\n    undefined\n  )\n\n  const item = useMemo(() => {\n    return items[row]\n  }, [items, row])\n\n  const column = useMemo(() => {\n    return columns.filter((column) => !column.isHidden)[col]\n  }, [columns, col])\n\n  const rendererClassName = useMemo(() => {\n    const classes = []\n\n    if (editing) {\n      classes.push(rendererClasses.editing)\n    } else if (selected) {\n      classes.push(rendererClasses.selected)\n    }\n\n    if (!!errorMessage && !editing) {\n      classes.push(rendererClasses.error)\n    }\n\n    if (isReadOnly || column.isReadOnly) {\n      classes.push(rendererClasses.readOnly)\n    }\n\n    return classes.join(' ')\n  }, [\n    isReadOnly,\n    selected,\n    editing,\n    rendererClasses,\n    errorMessage,\n    column.isReadOnly,\n  ])\n\n  const cellStyle = useMemo(() => {\n    const { width, minWidth, maxWidth, textAlign } = column.style || {}\n\n    let style: CSSProperties = {\n      width,\n      minWidth,\n      maxWidth,\n      textAlign,\n    }\n\n    switch (column.overflow || 'wrap') {\n      case 'wrap':\n        style = {\n          ...style,\n          whiteSpace: 'normal',\n          overflowWrap: 'anywhere',\n        }\n        break\n      case 'nowrap':\n        style = {\n          ...style,\n          whiteSpace: 'nowrap',\n          overflowX: 'visible',\n        }\n        break\n      case 'clip':\n        style = {\n          ...style,\n          whiteSpace: 'nowrap',\n          overflowX: 'hidden',\n          textOverflow: 'clip',\n        }\n        break\n      case 'ellipsis':\n        style = {\n          ...style,\n          whiteSpace: 'nowrap',\n          overflowX: 'hidden',\n          textOverflow: 'ellipsis',\n        }\n        break\n    }\n\n    return style\n  }, [column.style, column.overflow])\n\n  const padding = useMemo(() => {\n    return column.valueType === 'boolean' ? 'checkbox' : 'default'\n  }, [column.valueType])\n\n  const CellElement = useMemo(() => {\n    return (\n      <TableCell\n        classes={cellClasses}\n        className={rendererClassName}\n        style={cellStyle}\n        padding={padding}\n        onMouseDown={onMouseDown}\n        onMouseOver={onMouseOver}\n        onContextMenu={onContextMenu}\n        onDoubleClick={onDoubleClick}\n      >\n        {children}\n      </TableCell>\n    )\n  }, [\n    onMouseDown,\n    onMouseOver,\n    onContextMenu,\n    onDoubleClick,\n    children,\n    cellClasses,\n    rendererClassName,\n    cellStyle,\n    padding,\n  ])\n\n  useEffect(() => {\n    const errorMessage =\n      column.validate && column.validate(cell.value, item, items)\n    setErrorMessage(errorMessage)\n  }, [items, cell.value, item, column])\n\n  if (editing || typeof errorMessage === 'undefined') {\n    return CellElement\n  }\n\n  return (\n    <Tooltip title={errorMessage} placement='top-end'>\n      {CellElement}\n    </Tooltip>\n  )\n}\n\nexport default CellRenderer\n","import React, { useMemo } from 'react'\nimport { CSSProperties } from '@material-ui/core/styles/withStyles'\n\nimport { Item, ValueViewerProps } from '../interfaces'\n\nconst ValueViewer: <T extends Item>(\n  props: ValueViewerProps<T>\n) => JSX.Element = ({ tableProps, cell, value, col }) => {\n  const { columns } = tableProps\n\n  const column = useMemo(() => {\n    return columns.filter((column) => !column.isHidden)[col]\n  }, [columns, col])\n\n  const viewerStyle = useMemo(() => {\n    let style: CSSProperties = {\n      display: 'inline-block',\n    }\n\n    if (cell.valueType === 'boolean') {\n      style = {\n        ...style,\n        width: '24px',\n        textAlign: 'center',\n      }\n    }\n\n    return style\n  }, [cell.valueType])\n\n  const formatedValue = useMemo(() => {\n    if (!column.formatViewerValue) {\n      return value\n    }\n\n    return column.formatViewerValue(cell.value)\n  }, [cell.value, value, column.formatViewerValue])\n\n  return <span style={viewerStyle}>{formatedValue}</span>\n}\n\nexport default ValueViewer\n","import React, {\n  ChangeEventHandler,\n  FocusEventHandler,\n  useState,\n  useMemo,\n  useRef,\n  useCallback,\n  useEffect,\n} from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { Item, ItemValue, ItemValueType, DataEditorProps } from '../interfaces'\n\nconst useTextFieldStyles = makeStyles(() => ({\n  root: {\n    width: '100%',\n    marginTop: '-4px',\n    marginBottom: '-8px',\n  },\n}))\n\nconst useInputPropsStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: theme.typography.fontSize,\n  },\n}))\n\nconst parseInputValue: (\n  value: string,\n  valueType: ItemValueType\n) => ItemValue = (value, valueType) => {\n  switch (valueType) {\n    case 'string':\n      return value.length > 0 ? value : null\n    case 'number':\n      return value.length > 0 ? Number(value) : null\n    default:\n      return null\n  }\n}\n\nconst DataEditorTextField: <T extends Item>(\n  props: DataEditorProps<T>\n) => JSX.Element = ({\n  tableProps,\n  cell,\n  row,\n  col,\n  onChange,\n  onRevert,\n  onKeyDown,\n}) => {\n  const { items, columns } = tableProps\n\n  const textFieldClasses = useTextFieldStyles()\n  const inputPropsClasses = useInputPropsStyles()\n\n  const [errorMessage, setErrorMessage] = useState<string | undefined>(\n    undefined\n  )\n\n  const item = useMemo(() => {\n    return items[row]\n  }, [items, row])\n\n  const column = useMemo(() => {\n    return columns.filter((column) => !column.isHidden)[col]\n  }, [columns, col])\n\n  const defaultValue = useMemo(() => cell.value, [cell.value])\n\n  const inputType = useMemo(() => {\n    return cell.valueType === 'number' ? 'number' : column.inputType\n  }, [cell.valueType, column.inputType])\n\n  const inputPropsRef = useRef<HTMLInputElement>()\n\n  const onInputChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      const value = parseInputValue(event.target.value, cell.valueType)\n\n      const errorMessage =\n        column.validate && column.validate(value, item, items)\n      setErrorMessage(errorMessage)\n\n      if (!errorMessage) {\n        onChange(value)\n      }\n    },\n    [items, cell.valueType, onChange, item, column.validate]\n  )\n\n  const onInputPropsBlur = useCallback<\n    FocusEventHandler<HTMLInputElement>\n  >(() => {\n    onRevert()\n  }, [onRevert])\n\n  useEffect(() => {\n    const errorMessage =\n      column.validate && column.validate(cell.value, item, items)\n    setErrorMessage(errorMessage)\n  }, [items, cell.value, item, column.validate])\n\n  useEffect(() => {\n    inputPropsRef.current && inputPropsRef.current.focus()\n  }, [inputPropsRef])\n\n  return (\n    <TextField\n      classes={textFieldClasses}\n      defaultValue={defaultValue}\n      type={inputType}\n      error={!!errorMessage}\n      helperText={errorMessage}\n      onChange={onInputChange}\n      onKeyDown={onKeyDown}\n      inputProps={{\n        ref: inputPropsRef,\n        className: inputPropsClasses.root,\n        onBlur: onInputPropsBlur,\n      }}\n    />\n  )\n}\n\nexport default DataEditorTextField\n","import React, {\n  MouseEventHandler,\n  KeyboardEventHandler,\n  useState,\n  useMemo,\n  useCallback,\n  useEffect,\n} from 'react'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { Item, ItemValue, ItemValueType, DataEditorProps } from '../interfaces'\n\nconst useRootStyles = makeStyles(() => ({\n  root: {\n    marginTop: '-4px',\n    marginBottom: '-8px',\n  },\n}))\n\nconst useSelectStyles = makeStyles(() => ({\n  root: {\n    fontSize: '0.875rem',\n    marginTop: '-2px',\n    marginBottom: '-1px',\n  },\n}))\n\nconst parseTargetValue: (\n  value: string,\n  valueType: ItemValueType\n) => ItemValue = (value, valueType) => {\n  switch (valueType) {\n    case 'string':\n      return value !== '__EMPTY__' ? value : null\n    case 'number':\n      return value !== '__EMPTY__' ? Number(value) : null\n    default:\n      return null\n  }\n}\n\nconst DataEditorSelect: <T extends Item>(\n  props: DataEditorProps<T>\n) => JSX.Element = ({ tableProps, cell, col, onCommit, onRevert }) => {\n  const { columns } = tableProps\n\n  const rootClasses = useRootStyles()\n  const selectClasses = useSelectStyles()\n\n  const [isOpen, setIsOpen] = useState(false)\n\n  const column = useMemo(() => {\n    return columns.filter((column) => !column.isHidden)[col]\n  }, [columns, col])\n\n  const onMenuItemMouseDown = useCallback<MouseEventHandler<HTMLLIElement>>(\n    (event) => {\n      event.stopPropagation()\n\n      const targetValue = (event.target as HTMLLIElement).dataset.value\n\n      if (typeof targetValue === 'undefined') {\n        return\n      }\n\n      const parsedValue = parseTargetValue(targetValue, cell.valueType)\n\n      let value\n      if (!column.isRequired) {\n        if (cell.value !== parsedValue) {\n          value = parsedValue\n        } else {\n          value = null\n        }\n      } else {\n        value = parsedValue\n      }\n\n      onCommit(value)\n      setIsOpen(false)\n    },\n    [cell.value, cell.valueType, onCommit, column.isRequired]\n  )\n\n  const onMenuItemKeyDown = useCallback<KeyboardEventHandler<HTMLLIElement>>(\n    (event) => {\n      switch (event.key) {\n        case 'Enter':\n          {\n            event.stopPropagation()\n\n            const targetValue = (event.target as HTMLLIElement).dataset.value\n\n            if (typeof targetValue === 'undefined') {\n              return\n            }\n\n            const parsedValue = parseTargetValue(targetValue, cell.valueType)\n\n            let value\n            if (!column.isRequired) {\n              if (cell.value !== parsedValue) {\n                value = parsedValue\n              } else {\n                value = null\n              }\n            } else {\n              value = parsedValue\n            }\n\n            onCommit(value)\n            setIsOpen(false)\n          }\n          break\n        case 'Escape':\n          event.stopPropagation()\n          onRevert()\n          setIsOpen(false)\n          break\n      }\n    },\n    [cell.value, cell.valueType, onCommit, onRevert, column.isRequired]\n  )\n\n  useEffect(() => {\n    setIsOpen(true)\n  }, [])\n\n  if (!column.enum) {\n    throw new Error('Never')\n  }\n\n  return (\n    <div className={rootClasses.root}>\n      <Select\n        classes={selectClasses}\n        value={cell.value !== null ? cell.value : '__EMPTY__'}\n        open={isOpen}\n      >\n        {!column.isRequired && (\n          <MenuItem\n            value='__EMPTY__'\n            onMouseDown={onMenuItemMouseDown}\n            onKeyDown={onMenuItemKeyDown}\n          >\n            &nbsp;\n          </MenuItem>\n        )}\n        {column.enum.map((e) => (\n          <MenuItem\n            value={e}\n            key={e}\n            onMouseDown={onMenuItemMouseDown}\n            onKeyDown={onMenuItemKeyDown}\n          >\n            {e}\n          </MenuItem>\n        ))}\n      </Select>\n    </div>\n  )\n}\n\nexport default DataEditorSelect\n","import React, {\n  RefObject,\n  MouseEventHandler,\n  KeyboardEventHandler,\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n} from 'react'\nimport Checkbox from '@material-ui/core/Checkbox'\n\nimport { Item, DataEditorProps } from '../interfaces'\n\nconst DataEditorCheckbox: <T extends Item>(\n  props: DataEditorProps<T>\n) => JSX.Element = ({ cell, onCommit, onRevert }) => {\n  const [isIndeterminate, setIsIndeterminate] = useState(cell.value === null)\n\n  const checkboxInputRef = useRef<HTMLInputElement>() as RefObject<HTMLInputElement>\n\n  const onCheckboxMouseDown = useCallback<MouseEventHandler<HTMLButtonElement>>(\n    (event) => {\n      event.stopPropagation()\n\n      if (cell.value === null) {\n        onCommit(true)\n        return\n      }\n\n      onCommit(!cell.value)\n    },\n    [cell.value, onCommit]\n  )\n\n  const onCheckboxKeyDown = useCallback<\n    KeyboardEventHandler<HTMLButtonElement>\n  >(\n    (event) => {\n      if (!checkboxInputRef.current) {\n        return\n      }\n\n      switch (event.key) {\n        case 'Enter':\n          {\n            event.preventDefault()\n            const value = checkboxInputRef.current.checked\n            onCommit(value)\n          }\n          break\n        case 'Escape':\n          onRevert()\n          break\n        case 'Tab':\n          event.preventDefault()\n          break\n      }\n    },\n    [onCommit, onRevert, checkboxInputRef]\n  )\n\n  const onCheckboxChange = useCallback(() => {\n    setIsIndeterminate(false)\n  }, [])\n\n  useEffect(() => {\n    checkboxInputRef.current && checkboxInputRef.current.focus()\n  }, [checkboxInputRef])\n\n  return (\n    <Checkbox\n      defaultChecked={typeof cell.value === 'boolean' && cell.value}\n      indeterminate={isIndeterminate}\n      inputRef={checkboxInputRef}\n      onMouseDown={onCheckboxMouseDown}\n      onKeyDown={onCheckboxKeyDown}\n      onChange={onCheckboxChange}\n    />\n  )\n}\n\nexport default DataEditorCheckbox\n","import React, { useMemo } from 'react'\n\nimport { Item, DataEditorProps } from '../interfaces'\n\nimport DataEditorTextField from './DataEditorTextField'\nimport DataEditorSelect from './DataEditorSelect'\nimport DataEditorCheckbox from './DataEditorCheckbox'\n\nconst DataEditor: <T extends Item>(props: DataEditorProps<T>) => JSX.Element = (\n  props\n) => {\n  const { columns } = props.tableProps\n\n  const column = useMemo(() => {\n    return columns.filter((column) => !column.isHidden)[props.col]\n  }, [columns, props.col])\n\n  if (column.valueType === 'boolean') {\n    return <DataEditorCheckbox {...props} />\n  } else if (column.enum) {\n    return <DataEditorSelect {...props} />\n  } else {\n    return <DataEditorTextField {...props} />\n  }\n}\n\nexport default DataEditor\n","import React from 'react'\n\nimport { ModelessDataTableProps, Item } from './interfaces'\n\nimport DataSheet from './datasheet-components/DataSheet'\nimport valueRenderer from './datasheet-components/value-renderer'\n\nimport useData from './hooks/useData'\nimport useSheetRenderer from './hooks/useSheetRenderer'\nimport useRowRenderer from './hooks/useRowRenderer'\nimport useCellRenderer from './hooks/useCellRenderer'\nimport useValueViewer from './hooks/useValueViewer'\nimport useDataEditor from './hooks/useDataEditor'\n\nimport './index.css'\n\nexport * from './interfaces'\n\nconst ModelessDataTable = <T extends Item>(\n  props: ModelessDataTableProps<T>\n): JSX.Element => {\n  const { data, onCellsChanged, onDragEnd, onDelete, onInsert } = useData(props)\n\n  const sheetRenderer = useSheetRenderer({\n    tableProps: props,\n    onDragEnd,\n    onInsert,\n  })\n\n  const rowRenderer = useRowRenderer({\n    tableProps: props,\n    onDelete,\n  })\n\n  const cellRenderer = useCellRenderer({\n    tableProps: props,\n  })\n\n  const valueViewer = useValueViewer({\n    tableProps: props,\n  })\n\n  const dataEditor = useDataEditor({\n    tableProps: props,\n  })\n\n  return (\n    <DataSheet\n      data={data}\n      valueRenderer={valueRenderer}\n      onCellsChanged={onCellsChanged}\n      sheetRenderer={sheetRenderer}\n      rowRenderer={rowRenderer}\n      cellRenderer={cellRenderer}\n      valueViewer={valueViewer}\n      dataEditor={dataEditor}\n    />\n  )\n}\n\nexport default ModelessDataTable\n","import React from 'react'\n\nimport { Item, SheetRendererProps, DataSheetSheetRenderer } from '../interfaces'\n\nimport SheetRenderer from '../datasheet-components/SheetRenderer'\n\nconst useSheetRenderer = <T extends Item>(\n  params: Pick<SheetRendererProps<T>, 'tableProps' | 'onDragEnd' | 'onInsert'>\n): DataSheetSheetRenderer => (props) => {\n  return <SheetRenderer {...params} {...props} />\n}\n\nexport default useSheetRenderer\n","import React from 'react'\n\nimport { Item, RowRendererProps, DataSheetRowRenderer } from '../interfaces'\n\nimport RowRenderer from '../datasheet-components/RowRenderer'\n\nconst useRowRenderer = <T extends Item>(\n  params: Pick<RowRendererProps<T>, 'tableProps' | 'onDelete'>\n): DataSheetRowRenderer => (props) => {\n  return <RowRenderer {...params} {...props} />\n}\n\nexport default useRowRenderer\n","import React from 'react'\n\nimport { Item, CellRendererProps, DataSheetCellRenderer } from '../interfaces'\n\nimport CellRenderer from '../datasheet-components/CellRenderer'\n\nconst useCellRenderer = <T extends Item>(\n  params: Pick<CellRendererProps<T>, 'tableProps'>\n): DataSheetCellRenderer => (props) => {\n  return <CellRenderer {...params} {...props} />\n}\n\nexport default useCellRenderer\n","import React from 'react'\n\nimport { Item, ValueViewerProps, DataSheetValueViewer } from '../interfaces'\n\nimport ValueViewer from '../datasheet-components/ValueViewer'\n\nconst useValueViewer = <T extends Item>(\n  params: Pick<ValueViewerProps<T>, 'tableProps'>\n): DataSheetValueViewer => (props) => {\n  return <ValueViewer {...params} {...props} />\n}\n\nexport default useValueViewer\n","import React from 'react'\n\nimport { Item, DataEditorProps, DataSheetDataEditor } from '../interfaces'\n\nimport DataEditor from '../datasheet-components/DataEditor'\n\nconst useDataEditor = <T extends Item>(\n  params: Pick<DataEditorProps<T>, 'tableProps'>\n): DataSheetDataEditor => (props) => {\n  return <DataEditor {...params} {...props} />\n}\n\nexport default useDataEditor\n","import React, { ChangeEventHandler, useState, useMemo, useCallback, useEffect } from 'react'\n\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport Paper from '@material-ui/core/Paper'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Switch from '@material-ui/core/Switch'\nimport TableContainer from '@material-ui/core/TableContainer'\n\nimport ModelessDataTable, {\n  NullableItem,\n  Column,\n  ReorderHandler,\n  ChangeAtIndexHandler,\n  DeleteAtIndexHandler,\n  InsertAtLastHandler,\n} from 'material-modeless-data-table'\nimport 'material-modeless-data-table/dist/index.css'\n\ntype ExampleItem = {\n  a: string\n  b: string\n  hidden: string\n  c: number\n  d: boolean\n  e: string\n}\n\nconst App = () => {\n  const [isTableSizeSmall, setIsTableSizeSmall] = useState(false)\n  const [isReadOnly, setIsReadOnly] = useState(false)\n  const [isTableHeaderHidden, setIsTableHeaderHidden] = useState(false)\n  const [isReorderDisabled, setIsReorderDisabled] = useState(false)\n  const [isDeleteDisabled, setIsDeleteDisabled] = useState(false)\n  const [isInsertDisabled, setIsInsertDisabled] = useState(false)\n\n  const onTableSizeSwitchChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsTableSizeSmall(event.target.checked)\n    },\n    []\n  )\n\n  const onReadOnlySwitchChage = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsReadOnly(event.target.checked)\n    },\n    []\n  )\n\n  const onTableHeaderHiddenSwitchChage = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsTableHeaderHidden(event.target.checked)\n    },\n    []\n  )\n\n  const onReorderDisabledSwitchChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsReorderDisabled(event.target.checked)\n    },\n    []\n  )\n\n  const onDeleteDisabledSwitchChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsDeleteDisabled(event.target.checked)\n    },\n    []\n  )\n\n  const onInsertDisabledSwitchChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (event) => {\n      setIsInsertDisabled(event.target.checked)\n    },\n    []\n  )\n\n  const [items, setItems] = useState<NullableItem<ExampleItem>[]>(() => {\n    return [\n      {\n        a: 'a0',\n        b: 'b0',\n        hidden: 'this param is hidden',\n        c: 0,\n        d: true,\n        e: new Date().toISOString(),\n      },\n      {\n        a: 'a1',\n        b: 'b1',\n        hidden: 'this param is hidden',\n        c: 1,\n        d: false,\n        e: new Date().toISOString(),\n      },\n      {\n        a: 'a2',\n        b: 'b2',\n        hidden: 'this param is hidden',\n        c: 2,\n        d: null,\n        e: new Date().toISOString(),\n      }\n    ]\n  })\n\n  const columns = useMemo<Column<ExampleItem>[]>(() => {\n    return [\n      {\n        keyProp: 'a',\n        valueType: 'string',\n        validate: (value, _, items) => {\n          if (value === null) {\n            return 'Required'\n          }\n\n          if (items.filter(item => item.a === value).length > 1) {\n            return 'Duplicated'\n          }\n\n          return undefined\n        },\n        label: 'A',\n        isRequired: true,\n        style: {\n          minWidth: '12rem',\n        }\n      },\n      {\n        keyProp: 'b',\n        valueType: 'string',\n        enum: ['b0', 'b1', 'b2', 'b3', 'b4'],\n        label: 'B',\n        style: {\n          width: '12rem',\n          minWidth: '12rem',\n        }\n      },\n      {\n        keyProp: 'hidden',\n        valueType: 'string',\n        defualtValue: 'this param is hidden',\n        isHidden: true,\n      },\n      {\n        keyProp: 'c',\n        valueType: 'number',\n        label: 'C',\n        style: {\n          width: '12rem',\n          minWidth: '12rem',\n          textAlign: 'right'\n        }\n      },\n      {\n        keyProp: 'd',\n        valueType: 'boolean',\n        label: 'D',\n        style: {\n          width: '8rem',\n          minWIdth: '8rem',\n          textAlign: 'center'\n        }\n      },\n      {\n        keyProp: 'e',\n        valueType: 'string',\n        formatViewerValue: (value) => {\n          return new Date(value as string).toLocaleString()\n        },\n        defualtValue: () => new Date().toISOString(),\n        label: 'E',\n        isReadOnly: true,\n        style: {\n          width: '12rem',\n          minWidth: '12rem'\n        }\n      }\n    ]\n  }, [])\n\n  const onReorder = useCallback<ReorderHandler<ExampleItem>>(\n    ({ items }) => {\n      setItems(items)\n    },\n    []\n  )\n\n  const onChangeAtIndex = useCallback<ChangeAtIndexHandler<ExampleItem>>(\n    ({ newItem, index }) => {\n      const updatedItems = items.map((item, i) => {\n        if (i !== index) {\n          return item\n        }\n\n        return newItem\n      })\n\n      setItems(updatedItems)\n    },\n    [items]\n  )\n\n  const onDeleteAtIndex = useCallback<DeleteAtIndexHandler<ExampleItem>>(\n    ({ index }) => {\n      const updatedItems = items.filter((_, i) => i !== index)\n\n      setItems(updatedItems)\n    },\n    [items]\n  )\n\n  const onInsertAtLast = useCallback<InsertAtLastHandler<ExampleItem>>(\n    ({ newItem }) => {\n      const updatedItems = [...items, newItem]\n\n      setItems(updatedItems)\n    },\n    [items]\n  )\n\n  useEffect(() => {\n    console.log(items)\n  }, [items])\n\n  return (\n    <Container>\n      <Box marginY={2}>\n        <Paper>\n          <Box padding={2}>\n            <FormGroup row>\n              <FormControlLabel\n                control={<Switch checked={isTableSizeSmall} onChange={onTableSizeSwitchChange} />}\n                label=\"Small\"\n              />\n\n              <FormControlLabel\n                control={<Switch checked={isTableHeaderHidden} onChange={onTableHeaderHiddenSwitchChage} />}\n                label=\"isTableHeaderHidden\"\n              />\n            </FormGroup>\n\n            <FormGroup row>\n              <FormControlLabel\n                control={<Switch checked={isReadOnly} onChange={onReadOnlySwitchChage} />}\n                label=\"isReadOnly\"\n              />\n\n              <FormControlLabel\n                control={<Switch checked={isReorderDisabled} onChange={onReorderDisabledSwitchChange} />}\n                label=\"isReorderDisabled\"\n              />\n\n              <FormControlLabel\n                control={<Switch checked={isDeleteDisabled} onChange={onDeleteDisabledSwitchChange} />}\n                label=\"isDeleteDisabled\"\n              />\n\n              <FormControlLabel\n                control={<Switch checked={isInsertDisabled} onChange={onInsertDisabledSwitchChange} />}\n                label=\"isInsertDisabled\"\n              />\n            </FormGroup>\n          </Box>\n        </Paper>\n      </Box>\n\n      <TableContainer component={Paper}>\n        <ModelessDataTable<ExampleItem>\n          id=\"example\"\n          items={items}\n          columns={columns}\n          onReorder={onReorder}\n          onChangeAtIndex={onChangeAtIndex}\n          onDeleteAtIndex={onDeleteAtIndex}\n          onInsertAtLast={onInsertAtLast}\n          tableSize={isTableSizeSmall ? 'small' : 'medium'}\n          isReadOnly={isReadOnly}\n          isTableHeaderHidden={isTableHeaderHidden}\n          isReorderDisabled={isReorderDisabled}\n          isDeleteDisabled={isDeleteDisabled}\n          isInsertDisabled={isInsertDisabled}\n        />\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default App\n","import React, { Fragment } from 'react'\nimport ReactDOM from 'react-dom'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport App from './App'\n\nReactDOM.render(\n  <Fragment>\n    <CssBaseline />\n    <App />\n  </Fragment>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}